using System;
using UnityEngine;
using System.Collections.Generic;
using UnityEngine.UI;
using CometUI;
using UI;

namespace CometUI
{
    public partial class DialogWindow : BaseView
    {
#pragma warning disable 0414 //never used
        [Header("Controls (auto capture)")]
        [AutoGenerated, SerializeField] UnityEngine.UI.Text txMessage = default;
        [AutoGenerated, SerializeField] UnityEngine.UI.Button btOk = default;
        [AutoGenerated, SerializeField] UnityEngine.UI.Button btIgnore = default;
        [AutoGenerated, SerializeField] UnityEngine.UI.Button btCancel = default;
#pragma warning restore 0414

        bool closeByTap = false;
        bool created = false;
        public DialogResult DialogResult { get; private set; }

        void Start()
        {
            created = true;
        }

        public override void AutoSubscribe()
        {
            SubscribeOnChanged(txMessage);
            SubscribeOnChanged(btOk);
            SubscribeOnChanged(btIgnore);
            SubscribeOnChanged(btCancel);

            Subscribe(btOk, () => { DialogResult = DialogResult.Ok; Close(); });
            Subscribe(btCancel, () => { DialogResult = DialogResult.Cancel; Close(); });
            Subscribe(btIgnore, () => { DialogResult = DialogResult.Ignore; Close(); });
        }

        public void Build(string message, string okText, string cancelText, string ignoreText, bool closeByTap)
        {
            this.closeByTap = closeByTap;

            Set(txMessage, message);
            Set(btOk, okText);
            Set(btCancel, cancelText);
            Set(btIgnore, ignoreText);

            SetActive(btOk, okText != null);
            SetActive(btCancel, cancelText != null);
            SetActive(btIgnore, ignoreText != null);

            DialogResult = DialogResult.None;

            OnBuildSafe(true);
        }

        public override void OnGesture(GestureInfo info)
        {
            base.OnGesture(info);

            if (info.Gesture == Gesture.Tap && closeByTap)
            {
                DialogResult = DialogResult.Ok;
                info.IsHandled = true;
                Close();
            }
        }

        protected override void OnDisable()
        {
            if (created)
                Destroy(gameObject);
            base.OnDisable();
        }
    }

    public enum DialogResult
    {
        None, Ok, Cancel, Ignore
    }
}

